# -*- coding: utf-8 -*-
'''
Created on May 3, 2012
{'id': 'inc', 'thread':'айди_треда', 'name': 'имя', 'picture': 'путь до пикчи', 'message': 'тело пста.', 'op': 'Ture\False оп или нет'}
@author: mikoto
'''



#strftime("%Y-%m-%d %H:%M:%S", gmtime())

from time import localtime, strftime
import pymongo
import string
import random
import os
import hashlib
from PIL import Image
import re
import tornado.escape

def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for x in range(size))

class Database(object):
    def __init__(self):
        connection = pymongo.Connection('localhost', 27017)
        db = connection.Mikotoboard
        self.threads = db.threads
        self.posts = db.posts
        self.boards = db.boards
    
    def message_handler(self, message, thread_id):
        message = tornado.escape.xhtml_escape(message)
        r = re.compile(r'&gt;(.*)')
        message = r.sub(r'<span style="color:green">&gt;\1</span><br>', message)
        r = re.compile(r'\n')
        message = r.sub('<br>', message)
        r = re.compile(r'\@([0-9]+)')
        message = r.sub(r'<a href=/thread/%s#\1>&gt;&gt;\1</a><br>' % thread_id, message)
        r = re.compile(r'(\*\*)(.+?)\1')
        message = r.sub(r'<b>\2</b>', message)
        r = re.compile(r'(\*)(.+?)\1')
        message = r.sub(r'<i>\2</i>', message)
        r = re.compile(r'(\%\%)(.+?)\1')
        message = r.sub(r'<span class="spoiler">\2</span>', message)
        r = re.compile(r'(\-\-)(.+?)\1')
        message = r.sub(r'<s>\2</s>', message)
        
        #r = re.compile('&gt;&gt;([0-9]+)')
        #message = r.sub(r'<a href="/thread/%s#\1">&#62;\1</a>' % thread_id, message)
        #r = re.compile('&gt;(.*$)')
        #message = r.sub(r'<font color="GREEN">&#62;\1</font>', message)
        #r = re.compile(r'(\*\*)+([^.*?$]+)+(\*\*)')
        #message = r.sub(r'<b>\2</b>', message)
        return message
    
    def save_picture(self, picture):
        ext = os.path.splitext(picture['filename'])[1]
        #if r.match(ext):
        for post in self.posts.find():
            if post['picture']:
                f = open('.' + post['picture'], 'rb')
                sum1 = hashlib.md5(f.read()).hexdigest()
                sum2 = hashlib.md5(picture['body']).hexdigest()
                f.close()
                if sum1 == sum2:
                    return post['picture'], post['thumb']
                    break
        _id = id_generator()
        picture_name = "/img/" + _id + ext
        thumb_name = "/img/thumb/" + _id + ext
        f = open('.' + picture_name, 'wb')
        f.write(picture['body'])
        f.flush()
        f.close()
        thumb = Image.open('.' + picture_name)
        thumb.thumbnail((200, 400), Image.ANTIALIAS)
        thumb.save('.' + thumb_name, quality=100)
	print picture_name, thumb_name
        return picture_name, thumb_name
        
    def new_post(self, name, message, thread_id = None, picture = None, callback = None, op = False, thumb = None, board=None, ip=None):
        try:
            _id = int(self.posts.find().sort('id')[self.posts.count() - 1]['id']) + 1
        except:
            _id = 1
        pub_date = strftime("%Y-%m-%d %H:%M:%S", localtime())
        if name == '':
            name = 'Перкель'
        if picture:
            picture, thumb = self.save_picture(picture)
        message = self.message_handler(message, thread_id)
        post = {'id': _id, 'name': name, 'thumb': thumb, 'picture': picture, 'message': message, 'thread': int(thread_id), 'op': op, 'pub_date': pub_date, 'ip': ip}
        self.threads.update({'id': int(thread_id)}, {'$set':{'last_post': pub_date}})
        self.posts.insert(post)
        callback(thread_id, _id, board)
    
    def new_thread(self, name=None, picture=None, message=None, callback=None, board=None, ip=None):
        try:
            post_id = int(self.posts.find().sort('id')[self.posts.count() - 1]['id']) + 1
        except:
            post_id = 1
        try:
            thread_id = int(self.threads.find().sort('id')[self.threads.count() -1]['id']) + 1
        except:
            thread_id = 1
        if name == '':
            name = 'Перкель'
        picture, thumb = self.save_picture(picture)
        if picture == None:
            thread_id = False
            callback(thread_id)
            return
        message = self.message_handler(message, thread_id)
        pub_date = strftime("%Y-%m-%d %H:%M:%S", localtime())
        post = {'id': post_id, 'name': name,'thumb': thumb, 'picture': picture, 'message': message, 'thread':  thread_id, 'op': True, 'pub_date': pub_date, 'ip': ip}
        thread = {'id': thread_id, 'last_post': pub_date, 'board': board}
        self.posts.insert(post)
        self.threads.insert(thread)
        callback(thread_id, board)
    
    def get_threads(self, board, user, callback):
        auth = self.check_auth(user)
        if self.boards.find_one({'id': board}):
            threads=[]
            for thread in self.threads.find({'board': board}).sort('last_post'):
                _thread = {}
                posts = []
                _thread['op'] = (self.posts.find_one({'thread': thread['id'], 'op': True}))
                for post in self.posts.find({'thread': thread['id']}).sort('pub_date'):
                    if not post['op']:
                        posts.append(post)
                posts.reverse()
                posts = posts[:3]
                posts.reverse()
                _thread['posts'] = posts
                threads.append(_thread)
            #[{'op': post, 'posts':[post, post, post]}
            threads.reverse()
            boards = self.boards.find()
            board = self.boards.find_one({'id': board})
            callback(threads, board, boards, auth)
        else:
            boards = None
            board = None
            threads = None
            callback(threads, board, boards, auth)
    def get_post(self, post_id, board, user, callback):
		auth = self.check_auth(user)
        callback(self.posts.find_one({'id': post_id}), board, auth)
    def get_posts(self, thread_id, board, user, callback):
		auth = self.check_auth(user)
        thread = self.threads.find_one({'id': int(thread_id)})
        callback(self.posts.find({'thread': int(thread_id)}).sort('id'), thread, board, auth)
	def check_auth(self, user, callback = None):	
		record = self.users.find_one({'username': user['user']})
		if record:
			if record['password'] == user['pass']:
				if callback:
					callback(True)
				else:
					return True
			else:
				if callback:
					callback(False)
				else:
					return False
		else:
			if callback:
				callback(False)
			else:
				return False
